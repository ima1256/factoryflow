<div
  className="{`inline-block"
  px-3
  py-1
  rounded-full
  text-sm
  font-semibold
  ${statusColor}
  max-w-[150px]
  overflow-hidden
  whitespace-nowrap
  text-ellipsis`}
>
  {machine.status.toUpperCase()}
</div>

npm install -D @tailwindcss/line-clamp

function Example() {
  const longText =
    "Esto es un texto muy largo que debería truncarse con puntos suspensivos después de dos líneas, incluso si es extremadamente largo y ocupa varias líneas en pantalla.";

  return (
    <div className="p-5 max-w-md border border-gray-300">
      <h2
        className="text-xl font-bold line-clamp-2 max-w-full"
        title={longText}
      >
        {longText}
      </h2>
    </div>
  );
}


import { Typography } from "@mui/material";

<Typography
  id="machine-details-title"
  variant="h5"
  component="h2"
  mb={3}
  color="primary.main"
  fontWeight="bold"
  sx={{
    maxWidth: 400,        // equivalente a max-w-md (~28rem, 448px)
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
  }}
>
  {machine.name}
</Typography>


setMachines(prev =>
  [...prev].sort((a, b) => a.name.localeCompare(b.name))
);


<!-- type SortOrder = "asc" | "desc";

function sortBy<T>(
  array: T[],
  key: keyof T,
  order: SortOrder = "asc"
): T[] {
  return [...array].sort((a, b) => {
    const aVal = a[key];
    const bVal = b[key];

    // Null/undefined al final (asc) o al principio (desc)
    if (aVal == null && bVal != null) return order === "asc" ? 1 : -1;
    if (aVal != null && bVal == null) return order === "asc" ? -1 : 1;
    if (aVal == null && bVal == null) return 0;

    // String comparison
    if (typeof aVal === "string" && typeof bVal === "string") {
      return order === "asc"
        ? aVal.localeCompare(bVal)
        : bVal.localeCompare(aVal);
    }

    // Numeric or Date (timestamps or ISO strings)
    const aNum = typeof aVal === "number" ? aVal : new Date(aVal as any).getTime();
    const bNum = typeof bVal === "number" ? bVal : new Date(bVal as any).getTime();

    return order === "asc" ? aNum - bNum : bNum - aNum;
  });
} -->
